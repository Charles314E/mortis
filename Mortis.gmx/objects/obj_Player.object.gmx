<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ani_Player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>-1</persistent>
  <parentName>par_Entity</parentName>
  <maskName>msk_Player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
mSpeed = 3;
rSpeed = 3.5;
cSpeed = 1;
jSpeed = 6.75 + grav;
slashCharge = -1;
slashes = 0;
swooshed = false;
inTunnel = false;
set_hp(30);
hpW = 16;
hpH = 2;
jumps = 0;
quickRoll = false;
mask = mask_index;
gx = x;
gy = y;
gd = dir;
px = 1;
inventory = list_create(3, noone);
landed = false;
fallingDownShaft = true;
slashSweep = ds_map_create();
ds_map_add(slashSweep, "slash1", 1);
ds_map_add(slashSweep, "slash2", -1);
ds_map_add(slashSweep, "slash3", 0);

slashTimes = ds_list_create();
ds_list_add(slashTimes, 8, 12, 7, 11);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create States
states = ds_map_create();
state = "idle";
neutralState = state;
state_create("idle", ani_Player_idle, 0.15);
state_create("running", ani_Player_running, 0.6);
state_create("jumping", ani_Player_jumping, 0.3, 3);
state_create("inAir", ani_Player_jumping, 0, 5);
state_create("falling", ani_Player_jumping, 0.3, 7);
state_create("landing", ani_Player_jumping, 0.3, 9);
state_create("rolling", ani_Player_rolling, 0.333, 0);
state_create("crouching", ani_Player_crouching, 0.333, 0);
state_create("crouched", ani_Player_crouching, 0, 2);
state_create("straightening", ani_Player_crouching, 0.333, 3);
state_create("sidling", ani_Player_crouching, 0, 2);
state_create("praying", ani_Player_praying, 0.3, 0);
state_create("slashCharge", ani_Player_slash_windup, 0.5, 0);
state_create("powerSlash", ani_Player_powerslash, 0.75, 0);
state_create("slash1", ani_Player_slash1, 1, 0);
state_create("slash2", ani_Player_slash2, 1, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Body Parts
with (instance_create(x, y, obj_Player_hair)) {
    owner = other;
    image_speed = owner.image_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prevent Movement
unmoving = false;
if (instance_exists(obj_Transition) or is_state("praying") or fallingDownShaft) {
    unmoving = true;
}
with (obj_Item) {
    if (pickedUp) {
        other.unmoving = true;
    }
}
if (instance_exists(obj_Camera)) {
    px = obj_Camera.px;
}
if (fallingDownShaft) {
    state_change("falling");
    if (on_ground()) {
        fallingDownShaft = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Running
if (not (is_state("rolling") or state_contains("slash") or unmoving)) {
    if (keyboard_check(obj_Keys.LEFT) or keyboard_check(obj_Keys.RIGHT)) {
        if (not keyboard_check(obj_Keys.ROLL)) {
            if (keyboard_check(obj_Keys.LEFT)) {
                dir  = max(-1, dir - 1);
            }
            if (keyboard_check(obj_Keys.RIGHT)) {
                dir = min(1, dir + 1);
            }
            if (is_crouched()) {
                hSpeed = dir * cSpeed;
            }
            else {
                if (on_ground()) {
                    hSpeed = dir * mSpeed;
                    if (is_state("idle")) {
                        state_change("running");
                    }
                }
                else {
                    hSpeed = max(-mSpeed, min(hSpeed + (1 * dir), mSpeed));
                }
            }
        }
    }
    else if (on_ground()) {
        if (keyboard_check_released(obj_Keys.LEFT) or keyboard_check_released(obj_Keys.RIGHT)) {
            hSpeed = 0;
        }
        if (is_state("running")) {
            state_change("idle");
        }
    }
    else {
        hSpeed = hSpeed - (1 * hSpeed);
    }
}
if (on_ground()) {
    var block = collision_point(x, bbox_bottom + 1, obj_Block, false, false);
    if (block) {
        if (not block.platform and block.depth == -99999) {
            gx = x;
            gy = y;
            gd = dir;
        }
    }
    if (not landed and bbox_bottom &lt; room_height) {
        play_sound(snd_Landing);
        landed = true;
    }
}
else {
    landed = false;
}
if (is_state("running")) {
    if (floor(image_index) == 3 or floor(image_index) == 12) {
        play_sound(snd_Footstep, 0.5);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rolling
if (key_check(obj_Keys.ROLL) and not unmoving) {
    if (is_state("idle") or is_state("running") or state_contains("slash")) {
        if (on_ground()) {
            var ca = key_check(obj_Keys.LEFT);
            var cd = key_check(obj_Keys.RIGHT);
            if (ca or cd) {
                if ((ca and dir == -1) or (cd and dir == 1)) {
                    rDir = 1;
                }
                else {
                    rDir = -1;
                }
                with (obj_Slash) {
                    if (owner == other) {
                        instance_destroy();
                    }
                }
                slashes = 0;
                if (is_state("running") or state_contains("slash")) {
                    state_change("rolling", 4);
                    quickRoll = true;
                }
                else {
                    state_change("rolling");
                }
                if (rDir == -1) {
                    sprite_index = ani_Player_rolling_reverse;
                }
            }
        }
    }
}
if (is_state("rolling")) {
    if (round(image_index) == 5) {
        hSpeed = (rDir * dir) * rSpeed;
        vSpeed = -2.5;
        play_sound(snd_Jumping, 1);
    }
    if (quickRoll and floor(image_index) == 12) {
        state_change("idle");
        quickRoll = false;
    }
}
else {
    quickRoll = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply Friction
if (abs(hSpeed) &gt; 0) {
    hSpeed -= sign(hSpeed) * fSpeed;
    if (abs(hSpeed) &lt; fSpeed * 2) {
        hSpeed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Double Jumping
if (keyboard_check_pressed(obj_Keys.JUMP) and not unmoving) {
    if (has_item(items.DEMON_WINGS)) {
        if (is_state("jumping") or is_state("inAir") or is_state("falling") and jumps &lt; 1) {
            with (instance_create(x, y, obj_Player_demonwings)) {
                owner = other;
            }
            play_sound(snd_DemonWing);
            jumps += 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jumping
if (not (is_state("rolling") or instance_exists(obj_Player_demonwings) or is_crouched() or unmoving)) {
    if (keyboard_check_pressed(obj_Keys.UP)) {
        if (is_state("idle") or is_state("running")) {
            if (on_ground()) {
                state_change("jumping");
                play_sound(snd_Jumping, 1);
            }
        }
    }
    if (not state_contains("slash")) {
        if (is_state("springing")) {
            if (round(image_index) == 2) {
                state_change("jumping");
            }
        }
        if (is_state("jumping")) {
            if (round(image_index) == 5) {
                state_change("inAir");
            }
            if (on_ground() and vSpeed == grav) {
                vSpeed -= jSpeed;
            }
        }
        if (is_state("inAir") or not on_ground()) {
            if (vSpeed &gt; 0) {
                state_change("falling");
            }
        }
        if (is_state("falling")) {
            if (round(image_index) == 8) {
                image_speed = 0;
            }
            if (on_ground()) {
                state_change("landing");
            }
        }
        if (is_state("landing")) {
            hSpeed = 0;
            jumps = 0;
            if (round(image_index) == image_number - 1) {
                state_change("idle");
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Carried on Platform
var inst = collision_line(bbox_left, bbox_bottom + 1, bbox_right, bbox_bottom + 1, obj_MovingPlatform, false, false);
if (inst) {
    hpSpeed = inst.hSpeed;
    vpSpeed = inst.vSpeed;
}
else {
    hpSpeed = 0;
    vpSpeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Player Position
x += hSpeed + hpSpeed;
y += vSpeed + vpSpeed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Free Space
if (x == max(0, min(x, room_width)) and y == max(y, min(0, room_height))) {
    if (not collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_Block, false, false)) {
        cx = x;
        cy = y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision Y
collisionY();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision X
collisionX();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision Back
collisionBack();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crouching
if ((not (is_state("rolling") or unmoving)) and on_ground()) {
    if (keyboard_check_pressed(obj_Keys.DOWN)) {
        state_change("crouching");
    }
    if (keyboard_check(obj_Keys.DOWN)) {
        if (is_state("crouching")) {
            if (round(image_index) == 2) {
                state_change("crouched");
            }
        }
    }
    if (not on_ceiling()) {
        if (keyboard_check_released(obj_Keys.DOWN) or (inTunnel and not keyboard_check(obj_Keys.DOWN))) {
            inTunnel = false;
            if (is_state("crouching") or state_change("crouched")) {
                state_change("straightening");
            }
        }
    }
    else {
        inTunnel = true;
    }
}
if (not is_state("rolling") and on_ground() and on_ceiling()) {
    state_change("crouched");
}
if (is_state("crouched") or is_state("rolling")) {
    mask_index = msk_Player_short;
}
else {
    mask_index = mask;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slashing
if (not (is_state("rolling") or unmoving)) {
    if (keyboard_check(obj_Keys.ATTACK)) {
        slashCharge += 1;
        if (has_item(items.POWER_SLASH)) {
            if (slashCharge == round(room_speed / 4)) {
                state_change("slashCharge");
                play_sound(snd_SlashCharge);
                slashes = 0;
            }
        }
    }
    if (is_state("slashCharge")) {
        hSpeed = 0;
        if (round(image_index) == image_number) {
            image_speed = 0;
        }
    }
    if (keyboard_check_released(obj_Keys.ATTACK)) {
        if (is_state("slashCharge")) {
            if (round(image_index) == image_number) {
                state_change("powerSlash");
                melee_attack(noone, "msk_Player_powerslash", dir * 2, 4, 3, snd_PowerSlash, 1, obj_Enemy, true);
            }
            else if (floor(image_index) == 9) {
                if (not swooshed) {
                    swooshed = true;
                    play_sound(snd_SlashChargeSwoosh);
                    play_sound(snd_SlashChargeSwoosh2);
                }
            }
            else {
                swooshed = false;
                audio_stop_sound(snd_SlashCharge);
                state_change("idle");
            }
        }
        else {
            var mn = ds_list_find_value(slashTimes, (slashes * 2));
            if (not is_undefined(mn)) {
                var s = string(slashes + 1);
                if (slashes == 0) {
                    if (on_ground()) {
                        slash(dir * 2, 2, asset_get_index("snd_Slash1"), ds_map_find_value(slashSweep, "slash" + s));
                    }
                    else {
                        slash(0, 2, asset_get_index("snd_Slash1"), ds_map_find_value(slashSweep, "slash" + s));
                    }
                }
                else {
                    var mx = ds_list_find_value(slashTimes, (slashes * 2) + 1);
                    show_debug_message("[DBG]: combo[" + string(slashes) + "] = " + tuple(mn, mx));
                    if (ceil(image_index) &gt;= mn and floor(image_index) &lt;= mx) {
                        slash(dir * 2, 2, asset_get_index("snd_Slash" + string(slashes + 1)), ds_map_find_value(slashSweep, "slash" + s));
                    }
                }
            }
        }
        slashCharge = -1;
    }
}
if (is_state("powerSlash")) {
    if (image_speed &gt; 0) {
        if (floor(image_index) == 5 or floor(image_index) == 8 or floor(image_index) == 10) {
            hSpeed = dir;
        }
    }
    if (floor(image_index) == 11) {
        shake_camera(12, 0.95);
    }
}
if (not state_contains("slash")) {
    slashes = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Praying
if (is_state("praying")) {
    hSpeed = 0;
    image_speed = 0;
    if (not instance_exists(obj_Transition)) {
        var fi = floor(image_index);
        if (fi == min(5, max(fi, 6))) {
            image_speed = 0.025;
        }
        else if (fi == 7) {
            if (not healed) {
                heal(mhp);
                save_game();
                healed = true;
            }
            image_speed = 0.15;
        }
        else {
            image_speed = 0.3;
            healed = false;
        }
    }
}
if (not (collision_point(bbox_left, bbox_bottom, obj_SaveLight, false, false) or collision_point(bbox_right, bbox_bottom, obj_SaveLight, false, false))) {
    saved = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Slash
if (state_contains("slash")) {
    state_change("idle");
    slashes = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Crouch
if (is_state("straightening")) {
    state_change("idle");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Demon Wings
if (is_state("demonWings")) {
    state_change("falling");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Roll
if (is_state("rolling")) {
    state_change("idle");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Prayer
if (is_state("praying")) {
    state_change("idle");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create GUI Objects
if (not instance_exists(obj_Camera)) {
    instance_create(x, y, obj_Camera);
}
if (not instance_exists(obj_Lighting)) {
    instance_create(0, 0, obj_Lighting);
}
if (not instance_exists(obj_Background)) {
    instance_create(0, 0, obj_Background);
}
if (not instance_exists(obj_Music)) {
    instance_create(0, 0, obj_Music);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hex
//show_message(hex(room_get_name(room)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Healthbar
if (healing() and is_state("praying")) {
    draw_set_alpha((hph / mhph) * 0.5);
    draw_rectangle_colour(0, 0, view_wport, view_hport, c3, c3, c3, c3, false);
    draw_set_alpha(1);
}

draw_rectangle_colour(2 * px, 2 * px, (2 + hpW) * px, (2 + hpH) * px, c2, c2, c2, c2, false);
draw_healthbar(1 * px, 1 * px, (1 + hpW) * px, (1 + hpH) * px, (max(0, hp) / mhp) * 100, c_white, c1, c1, 0, false, false);
if (hpLoss &gt; 0 and losingHP()) {
    draw_set_alpha(hpl / mhpl);
    var lhp1 = 1 + (hpW * (max(0, hp) / mhp));
    var lhp2 = 1 + (hpW * (hp / mhp));
    draw_rectangle_colour(lhp1 * px, (1 + (mhpl - hpl)) * px, (lhp2 + (hpW * (hpLoss / mhp))) * px, (1 + hpH + (mhpl - hpl)) * px, c3, c3, c3, c3, false);
    draw_set_alpha(1);
}
if (healing()) {
    draw_set_alpha(hph / mhph);
    draw_rectangle_colour(1 * px, 1 * px, (1 + hpW) * px * (max(0, hp) / mhp), (1 + hpH) * px, c3, c3, c3, c3, false);
    draw_set_alpha(1);
}

draw_text_default((5 + hpW) * px, 3 * px, mhp, noone, noone, 0.5, noone, noone, fnt_BoldText);
draw_text_default((4 + hpW) * px, 2 * px, max(0, hp), noone, noone, 1, noone, noone, fnt_BoldText);
if (losingHP()) {
    draw_text_default((4 + hpW) * px, 2 * px, max(0, hp), c_red, c_red, inv / mInv, noone, noone, fnt_BoldText);
}
if (healing()) {
    draw_text_default((4 + hpW) * px, 2 * px, max(0, hp), c1, c1, hph / mhph, noone, noone, fnt_BoldText);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Inventory
var bw = sprite_get_width(spr_ItemBox);
var sc = ((hpW * px) / 3) / bw;
for (i = 0; i &lt; ds_list_size(inventory); i += 1) {
    draw_sprite_ext(spr_ItemBox, 0, (2 * px) + (bw * sc * i), (3 + hpH) * px, sc, sc, 0, c_white, 1);
    //show_debug_message("[DBG]: item" + tuple((2 * px) + (bw * sc * i), sc));
    var itm = ds_list_find_value(inventory, i);
    //show_debug_message("[DBG]: sprite" + tuple(i, sprite_get_name(itm)));
    if (not is_undefined(itm)) {
        if (itm != noone) {
            var spr = ds_list_find_value(itm, 0);
            var n = ds_list_find_value(itm, 1);
            if (sprite_exists(spr)) {
                var ix = sprite_get_xoffset(spr);
                var iy = sprite_get_yoffset(spr);
                var ox = (((bw - sprite_get_width(spr)) / 2 + ix) * sc);
                var oy = (((bw - sprite_get_height(spr)) / 2 + iy) * sc);
                //show_debug_message("[DBG]: sprite" + tuple(i, sprite_get_name(spr), ix, iy, sprite_get_width(spr), sprite_get_height(spr), sprite_get_xoffset(spr), sprite_get_yoffset(spr)));
                draw_sprite_ext(spr, 0, (2 * px) + (bw * sc * i) + ox, (3 + hpH) * px + oy, sc, sc, 0, c_white, 1);
            }
            if (n &gt; 0) {
                draw_text_default((1.25 * px) + (bw * sc * (i + 1)), (2.5 + hpH) * px + (bw * sc), n, noone, noone, 1, fa_right, fa_bottom, fnt_BoldText);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Information
if (debug_mode) {
    draw_text_default(2 * px, (12 + hpH) * px, list_tuple("(", ")", inventory));
    draw_text_default(2 * px, (16 + hpH) * px, tuple(gx, gy));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Cleaver Wave
if (is_state("powerSlash")) {
    draw_sprite_ext(msk_Player_powerslash_wave, image_index, x, y, dir, 1, 0, c_white, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
