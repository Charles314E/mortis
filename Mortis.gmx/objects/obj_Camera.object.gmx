<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> ///Initialize Variables
fractionSpeed = 0.2;
targetX = 0;
targetY = 0;
target = obj_Player;
hSpeed = 0;
vSpeed = 0;
shakeMagnitude = -1;
shakeFade = 0;
viewW = 96;
viewH = viewW;
portW = 768;
portH = portW;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Views
if (instance_exists(obj_Room)) {
    view_wview[0] = viewW * obj_Room.viewSize;
    view_hview[0] = viewH * obj_Room.viewSize;
}
else {
    view_wview[0] = viewW;
    view_hview[0] = viewH;
}

view_wport[0] = portW;
view_hport[0] = portH;

view_hborder[0] = view_wview[0];
view_vborder[0] = view_hview[0];

view_object[0] = object_index;
for (i = 0; i &lt; 8; i += 1) {
    view_visible[i] = false;
}
view_visible[0] = true;
view_enabled = true;

px = (view_wport[0] / view_wview[0]) * (view_wview[0] / 64);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pan to Mouse
target = obj_Player;
fractionSpeed = 0.2;
with (obj_Player) {
    if (is_state("idle") and keyboard_check(vk_alt)) {
        other.target = objects.MOUSE;
        fractionSpeed = 0.01;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pan Camera
var tx, ty;
if (target == objects.MOUSE) {
    if (in_range(mouse_x, view_xview + 8, view_xview + view_wview - 8) and in_range(mouse_y, view_yview + 8, view_yview + view_hview - 8)) {
        tx = x;
        ty = y;
    }
    else {
        tx = mouse_x;
        ty = mouse_y;
    }
    tx = mouse_x;
    ty = mouse_y;
}
else if (target == noone) {
    tx = targetX;
    ty = targetY;
}
else {
    tx = noone;
    ty = noone;
    if (instance_exists(target)) {
        tx = target.x;
        ty = target.y;
    }
}
if (not (tx == noone or ty == noone)) {
    hSpeed = (tx - x) * fractionSpeed;
    vSpeed = (ty - y) * fractionSpeed;
    x += hSpeed;
    y += vSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shake Camera
if (round(shakeMagnitude) &gt; 0) {
    show_debug_message(shakeMagnitude);
    view_object = noone;
    view_hborder[0] = view_wview[0];
    view_vborder[0] = view_hview[0];
    shakeMagnitude = vibrate_camera(shakeMagnitude, shakeFade);
}
else {
    view_object = self;
    shakeMagnitude = -1;
    shakeFade = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Background Colour
background_colour = c_black;
background_showcolour = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Views
if (instance_exists(obj_Room)) {
    view_wview[0] = viewW * obj_Room.viewSize;
    view_hview[0] = viewH * obj_Room.viewSize;
}
else {
    view_wview[0] = viewW;
    view_hview[0] = viewH;
}

view_wport[0] = portW;
view_hport[0] = portH;

view_hborder[0] = view_wview[0];
view_vborder[0] = view_hview[0];

view_object[0] = object_index;
for (i = 0; i &lt; 8; i += 1) {
    view_visible[i] = false;
}
view_visible[0] = true;
view_enabled = true;

px = (view_wport[0] / view_wview[0]) * (view_wview[0] / 64);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
