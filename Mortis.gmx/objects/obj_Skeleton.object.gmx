<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ani_Skeleton</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
mSpeed = 0.5;
dir = choose(-1, 1);
pDir = dir;
pd = dir;
image_xscale = dir;
set_hp(5);
slashes = 0;
slapped = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create States
states = ds_map_create();
state = "crawling";
neutralState = state;
state_create("crawling", ani_Skeleton, 0.15);
state_create("attacking", ani_Skeleton_claw, 0.15);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply Friction
if (abs(hSpeed) &gt; 0) {
    hSpeed -= sign(hSpeed) * fSpeed;
    if (abs(hSpeed) &lt; fSpeed * 2) {
        hSpeed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crawl Forwards
if (is_state("crawling")) {
    if (not dead() and instance_exists(obj_Player)) {
        if (on_ground()) {
            var bbox = x;
            switch (pd) {
                case -1: bbox = bbox_left; break;
                case 1: bbox = bbox_right; break;
            }
            if (collision_point(bbox + pd, bbox_bottom + 1, obj_Block, false, false) and not collision_point(bbox + pd, bbox_bottom, obj_Block, false, false)) {
                if (floor(image_index) == 0 or floor(image_index) == 6) {
                    var following = false, blocked = false;
                    if (point_distance(x, y, obj_Player.x, obj_Player.y) &lt; 48) {
                        for (var i = 0; i &lt; 48; i += 1) {
                            if (not (following or blocked)) {
                                if (collision_line(x + (min(0, dir) * i), bbox_top, x + (min(0, dir) * i), bbox_bottom, obj_Player, true, false)) {
                                    following = true;
                                }
                                if (collision_line(x + (min(0, dir) * i), bbox_top, x + (min(0, dir) * i), bbox_bottom, obj_Block, true, false)) {
                                    blocked = true;
                                }
                            }
                        }
                    }
                    if (following) {
                        pd = sign(obj_Player.x - x);
                    }
                    if (pd != 0) {
                        pDir = pd;
                    }
                    image_speed = 0.05;
                    if (hSpeed == dir * mSpeed) {
                        hSpeed = 0;
                    }
                }
                else {
                    dir = pDir;
                    image_speed = 0.25;
                    if (hSpeed == 0) {
                        hSpeed = dir * mSpeed;
                        play_sound(snd_BoneCracking);
                    }
                }
            }
            else {
                pd *= -1;
                pDir = pd;
                dir = pDir;
                hSpeed *= dir * mSpeed;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack
if (is_state("crawling")) {
    if (floor(image_index) == 0 or floor(image_index) == 6) {
        if (collision_rectangle(x + (min(0, dir) * 24), bbox_top, x + (max(0, dir) * 16), bbox_bottom, obj_Player, true, false)) {
            hSpeed = 0;
            var in = floor(image_index);
            state_change("attacking");
            play_sound(snd_BoneCracking);
            if (in == 6) {
                //sprite_index = ani_Skeleton_claw_backarm;
            }
        }
    }
}
if (is_state("attacking")) {
    var fi = floor(image_index);
    if (max(8, min(fi, 13)) == fi) {
        if (slashes == 0) {
            if (melee_attack(noone, "msk_Skeleton_claw", dir * 2, 2, 5, noone, 1, obj_Player, true)) {
                slashes += 1;
                play_sound(snd_Swoosh);
            }
        }
        if (fi == 10 and not slapped) {
            play_sound(snd_Footstep, 1);
            slapped = true;
        }
        image_speed = 1;
    }
    else {
        slapped = false;
        slashes = 0;
        if (fi &lt;= 4) {
            image_speed = 0.25;
        }
        else if (fi &lt;= 7) {
            image_speed = 0.1;
        }
        else if (fi &lt;= 14) {
            image_speed = 0.05;
        }
        else {
            image_speed = 0.5;
        }
    }
}
else if (slashes &gt; 0) {
    slashes = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Carried on Platform
var inst = collision_line(bbox_left, bbox_bottom + 1, bbox_right, bbox_bottom + 1, obj_MovingPlatform, false, false);
if (inst) {
    hpSpeed = inst.hSpeed;
    vpSpeed = inst.vSpeed;
}
else {
    hpSpeed = 0;
    vpSpeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Position
x += hSpeed;
y += vSpeed;
image_xscale = dir;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Free Space
if (x == max(0, min(x, room_width)) and y == max(y, min(y, room_height))) {
    if (not collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_Block, false, false)) {
        cx = x;
        cy = y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision Y
collisionY();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision X
collisionX();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Attack
if (is_state("attacking")) {
    var spr = sprite_index;
    state_change("crawling");  
    if (spr == ani_Skeleton_claw_backarm) {
        image_index = 6;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
