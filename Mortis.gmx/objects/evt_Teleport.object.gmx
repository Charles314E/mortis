<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Teleport</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-101</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Parameters
map = noone;
xx = 0;
yy = 0;
dir = "default";
init = false;
hDir = noone;
vDir = noone;
hr = false;
vr = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
if (not init) {
    var hd, vd;
    switch (dir) {
        case 0: hd = choose(-1, 1); hr = true; vd = -1; break;
        case 90: hd = 1; vd = 0; break;
        case 180: hd = 0; vd = 1; break;
        case 270: hd = -1; vd = 0; break;
    }
    if (hDir == noone) {
        hDir = hd;
    }
    if (vDir == noone) {
        vDir = vd;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Teleport
var tp = true;
if (not (hDir == 0 or hr) and other.dir != hDir) {
    tp = false;
}
if (not (vDir == 0 or vr) and sign(other.vSpeed) != vDir) {
    tp = false;
}
if (not instance_exists(obj_Transition) and tp) {
    if (vDir == -1) {
        other.noGravity = true;
    } 
    room_transition(map, xx, yy, c_black, 0.5, hDir, vDir);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Border Curtain
if (not within_room(1)) {
    switch (dir) {
        case 0: draw_rectangle_colour(x, y - (sprite_height * 2), x + sprite_width, y + sprite_height, c_black, c_black, c_black, c_black, false); break;
        case 90: draw_rectangle_colour(x, y, x + (sprite_width * 3), y + sprite_height, c_black, c_black, c_black, c_black, false); break;
        case 180: draw_rectangle_colour(x, y, x + sprite_width, y + (sprite_height * 3), c_black, c_black, c_black, c_black, false); break;
        case 270: draw_rectangle_colour(x - (sprite_height * 2), y, x + sprite_width - 1, y + sprite_height, c_black, c_black, c_black, c_black, false); break;
    }
}
else {
    draw_rectangle_colour(x, y, x + sprite_width, y + sprite_height, c_green, c_green, c_green, c_green, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
