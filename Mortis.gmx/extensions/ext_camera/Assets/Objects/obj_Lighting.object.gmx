<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999</depth>
  <persistent>-1</persistent>
  <parentName>obj_SineObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
draw_set_circle_precision(32);
diameter = 128;
alpha = 0.9;
light = noone;
mmLights = ds_list_create();
active = true;
surface_light_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Lightsources
lightSources = ds_list_create();
ds_list_add(lightSources,   obj_Player, 0.5, 0, 0,
                            obj_Candle, 0.25, 0, 0,
                            obj_Light, 0.1, 0, 0,
                            obj_Mirror, -1, 0, 0,
                            obj_Wisp, -1, 35, 255,
                            obj_Djed, 0.175, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Alarm 1
alarm[1] = room_speed * 0.05;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Alarm 2
alarm[2] = room_speed * 0.2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create the Subtle Title Screen Glows
if (active) {
    if (room == rm_MainMenu) { 
        var mmLight = ds_list_create();
        ds_list_add(mmLight, 0, random_range(4, 64), random_range(0.025, 0.1), random_range(0, room_width), random_range(room_height * 0.1, room_height * 0.9));
        ds_list_add(mmLights, mmLight);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Alarm
alarm[2] = room_speed * 0.2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create the Bottom and Top Title Screen Glows
if (active) {
    var mmLight = ds_list_create();
    ds_list_add(mmLight, 0, random_range(4, 64), random_range(0.05, 0.2), random_range(0, room_width), choose(random_range(0, room_height * 0.1), random_range(room_height * 0.9, room_height)));
    ds_list_add(mmLights, mmLight);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Alarm
alarm[1] = room_speed * 0.05;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Surfaces
surface_light_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Information
if (obj_Controller.debug) {
    draw_text(0, 64, "light" + string(light));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Darkness
if (active) {
    if (surface_exists(light)) {
        surface_set_target(light);
        draw_set_colour(make_colour_hsv(0, 0, 255 * alpha));
        if (room == rm_MainMenu) {
            draw_set_colour(make_colour_hsv(0, 0, 255));
        }
        draw_rectangle(0, 0, view_wview, view_hview, false);
        draw_set_colour(c_white);
        surface_reset_target();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Title Screen Lights
if (active) {
    if (room == rm_MainMenu) {
        if (surface_exists(light)) {
            draw_set_blend_mode(bm_subtract);
            surface_set_target(light);
            var i = 0;
            while (i &lt; ds_list_size(mmLights)) {
                var mmLight = ds_list_find_value(mmLights, i);
                var theta = ds_list_find_value(mmLight, 0) + 1;
                var size = ds_list_find_value(mmLight, 1);
                var lum = ds_list_find_value(mmLight, 2);
                var xx = ds_list_find_value(mmLight, 3);
                var yy = ds_list_find_value(mmLight, 4);
                var opacity = sin(theta * pi / 180) * lum;
                draw_circle_colour(xx, yy, size, make_colour_hsv(0, 0, 255 * opacity), c_black, false);
                
                if (theta &lt; 180) {
                    ds_list_replace(mmLight, 0, theta);
                    ds_list_replace(mmLights, i, mmLight);
                }
                else {
                    ds_list_delete(mmLights, i);
                }
                i += 1;
            }
            surface_reset_target();
            draw_set_blend_mode(bm_normal);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Lights
if (active) {
    if (surface_exists(light)) {
        draw_set_blend_mode(bm_subtract);
        surface_set_target(light);
        for (var i = 0; i &lt; ds_list_size(lightSources) / 4; i += 1) {
            lightSource = ds_list_find_value(lightSources, i * 4);
            lightSize = diameter * ds_list_find_value(lightSources, (i * 4) + 1);
            lightHue = ds_list_find_value(lightSources, (i * 4) + 2);
            lightSaturation = ds_list_find_value(lightSources, (i * 4) + 3);
            lightAlpha = 255;
            with (lightSource) {
                //show_debug_message("[DBG]: " + tuple(object_get_name(object_index), glow));
                var lCol = make_colour_hsv(other.lightHue, other.lightSaturation, 255 * glow);
                var size = other.lightSize;
                if (object_index == obj_Light) {
                    if (bboxX == noone or bboxY == noone) {
                        if (dx == noone and dy == noone) {
                            var xx, yy, r1, r2, x1, y1, x2, y2;
                            xx = ds_list_find_value(bounces, 0);
                            yy = ds_list_find_value(bounces, 1);
                            for (var ii = 0; ii &lt; (ds_list_size(bounces) / 2) - 1; ii += 1) {
                                r1 = ds_list_find_value(bounces, i * 2);
                                if (room == r1) {
                                    x1 = ds_list_find_value(bounces, (i * 2) + 1);
                                    y1 = ds_list_find_value(bounces, (i * 2) + 2);
                                    r2 = ds_list_find_value(bounces, (i * 2) + 3);
                                    x2 = ds_list_find_value(bounces, (i * 2) + 4);
                                    y2 = ds_list_find_value(bounces, (i * 2) + 5);
                                    draw_line_width_colour(x1 - view_xview, y1 - view_yview, x2 - view_xview, y2 - view_yview, size, lCol, lCol);
                                }
                            }
                            xx = ds_list_find_value(bounces, ds_list_size(bounces) - 2);
                            yy = ds_list_find_value(bounces, ds_list_size(bounces) - 1);
                            draw_roundrect_colour_ext(xx - size - view_xview, yy - size - view_yview, x + size - view_xview, y + size - view_yview, size, size, lCol, c_black, false);
                        }
                    }
                    else {
                        lCol = make_colour_hsv(other.lightHue, other.lightSaturation, 255 * glow * ea);
                        draw_circle_colour(bboxX - view_xview, bboxY - view_yview, ecr + size, lCol, c_black, false);
                    }
                }
                else if (object_index == obj_Mirror) {
                    if (normal == max(180, min(normal, 359.5))) {
                        var offset = 1;
                    }
                    else {
                        var offset = -1;
                    }
                    var xo = offset * sin(image_angle * pi / 180);
                    var yo = offset * cos(image_angle * pi / 180);
                    var x1 = ((max(0, offset) + 2)) * sin((image_angle + 90) * pi / 180);
                    var y1 = ((max(0, offset) + 2)) * cos((image_angle + 90) * pi / 180);
                    var x2 = 16 * sin((image_angle + 90) * pi / 180);
                    var y2 = 16 * cos((image_angle + 90) * pi / 180);
                    draw_line_width_colour(x + xo + x1 - view_xview, y + yo + y1 - view_yview, x + xo + x2 - view_xview, y + yo + y2 - view_yview, sprite_height, lCol, c_black);
                }
                else if (object_index == obj_Wisp) {
                    var ii = 0;
                    while (ii &lt; ds_list_size(specks)) {
                        var wp = ds_list_find_value(specks, ii);
                        var wt = ds_list_find_value(wp, 0) + 3;
                        var ws = ds_list_find_value(wp, 1);
                        var wl = ds_list_find_value(wp, 2);
                        var wx = x + ds_list_find_value(wp, 3);
                        var wy = y + ds_list_find_value(wp, 4);
                        var wo = sin(wt * pi / 180) * wl;
                        //show_debug_message("[DBG]: " + tuple(list_tuple("[", "]", wp), wo));
                        draw_circle_colour(wx - view_xview, wy - view_yview, ws, make_colour_hsv(other.lightHue, other.lightSaturation, 255 * wo), c_black, false);
                        
                        if (wt &lt; 180) {
                            ds_list_replace(wp, 0, wt);
                            ds_list_replace(specks, ii, wp);
                        }
                        else {
                            ds_list_delete(specks, ii);
                        }
                        ii += 1;
                    }
                }
                else {
                    if (object_index == obj_Candle) {
                        size *= ds_list_find_value(sine, 0);
                    }
                    draw_circle_colour(x - view_xview, y - view_yview, size, lCol, c_black, false);
                }
                //show_debug_message("[DBG]: " + object_get_name(object_index) + "/" + string(id) + " (" + string(x) + ", " + string(y) + ", " + string(other.lightSize) + ", " + string(lightSine) + ")");
            }
        }
        surface_reset_target();
        draw_set_blend_mode(bm_normal);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Light Surface
if (active) {
    if (surface_exists(light)) {
        draw_set_blend_mode(bm_subtract);
        draw_surface(light, view_xview, view_yview);
        draw_set_blend_mode(bm_normal);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
